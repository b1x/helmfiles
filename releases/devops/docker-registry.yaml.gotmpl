nameOverride: docker-registry

podAnnotations:
  iam.amazonaws.com/role: '{{ .Values | getOrNil "docker-registry.iam-role" | default "" }}'

storage: s3

s3:
  region: '{{ .Values | getOrNil "docker-registry.s3.region" | default "ap-northeast-2" }}'
  bucket: '{{ .Values | getOrNil "docker-registry.s3.bucket" | default "docker-registry-bucket-name" }}'
  encrypt: '{{ .Values | getOrNil "docker-registry.s3.encrypt" | default "false" }}'
  secure: '{{ .Values | getOrNil "docker-registry.s3.secure" | default "false" }}'

secrets:
  haSharedSecret: "secret-string-287463"
  s3:
    accessKey: ""
    secretKey: ""

ingress:
  enabled: {{ .Values | getOrNil "docker-registry.ingress.enabled" | default false }}
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    ingress.kubernetes.io/proxy-body-size: "0"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: '{{ .Values | getOrNil "ingress.closed.whitelist" | default "0.0.0.0/0" }}'
  hosts:
    - '{{ .Values | getOrNil "docker-registry.ingress.host" | default "docker-registry.example.com" }}'
  path: /
  tls:
    - secretName: docker-registry-tls
      hosts:
        - '{{ .Values | getOrNil "docker-registry.ingress.host" | default "docker-registry.example.com" }}'
